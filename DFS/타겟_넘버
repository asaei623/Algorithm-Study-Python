# 더하고 빼는 모든 경우의 수를 순차적으로 만들어 가면서 마지막 노드가 target과 일치하는지
# 체크하면 되기 때문에 DFS를 사용할 수 있다.
## 재귀를 이용해서 depth를 만들어 순차적으로 수를 더하고 빼는 경로를 하나씩 만든다.

def solution(numbers, target):
    ans = dfs(numbers, target, 0)
    return ans

def dfs(numbers, target, depth):
    answer = 0
    # 끝까지 계산했다면 계산을 끝낸다.
    if depth == len(numbers):
        if sum(numbers) == target:
            return 1
        else: return 0
    
    # 더하고 빼는 경우의 수를 만들어 다음 depth로 내려보낸다.
    answer += dfs(numbers, target, depth+1)
    numbers[depth] *= -1 # 빼는 경우
    answer += dfs(numbers, target, depth+1)
    return answer
